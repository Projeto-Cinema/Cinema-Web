import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
# Importa as Op√ß√µes do Chrome
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# --- CONFIGURA√á√ïES ---
URL_DA_APP = "http://localhost:4200"
EMAIL_DE_TESTE = "teste@gmail.com"
SENHA_DE_TESTE = "testeteste"
NOME_DO_FICHEIRO_SCREENSHOT = "screenshot_erro_login.png"

# --- IN√çCIO DO TESTE ---

# --- CONFIGURA√á√ÉO ROBUSTA PARA WSL/DOCKER ---
# 1. Configura as op√ß√µes do Chrome
options = ChromeOptions()
# A op√ß√£o '--headless' executa o teste sem abrir uma janela de navegador vis√≠vel.
# √â altamente recomendado para estabilidade em ambientes como o WSL.
options.add_argument("--headless") 
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage") 
# A op√ß√£o '--disable-gpu' tamb√©m ajuda a prevenir crashes em ambientes sem uma GPU dedicada.
options.add_argument("--disable-gpu")
options.add_argument("--window-size=1920,1080")

# 2. Inicia o driver com as op√ß√µes configuradas.
# O Selenium 4+ gere o chromedriver automaticamente, n√£o precisamos mais do webdriver-manager.
driver = webdriver.Chrome(options=options)

try:
    print("‚ñ∂Ô∏è  Iniciando o teste de login...")
    
    driver.get(URL_DA_APP)
    print("‚úÖ P√°gina aberta com sucesso.")

    # Aumentamos o tempo de espera para 15 segundos para dar mais margem √† API
    wait = WebDriverWait(driver, 15)

    print("‚ñ∂Ô∏è  A procurar o √≠cone de utilizador para abrir o modal...")
    user_icon_container = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".user-section .user-container")))
    user_icon_container.click()
    print("‚úÖ Modal de login aberto.")

    print("‚ñ∂Ô∏è  A preencher o formul√°rio de login...")
    email_input = wait.until(EC.visibility_of_element_located((By.ID, "email")))
    password_input = driver.find_element(By.ID, "password")
    email_input.send_keys(EMAIL_DE_TESTE)
    password_input.send_keys(SENHA_DE_TESTE)
    print("‚úÖ Formul√°rio preenchido.")

    login_button = driver.find_element(By.CSS_SELECTOR, "form.login-form button[type='submit']")
    login_button.click()
    print("‚úÖ Bot√£o 'Entrar' clicado.")

    # --- L√ìGICA DE VERIFICA√á√ÉO MELHORADA ---
    print("‚ñ∂Ô∏è  A aguardar o fecho do modal de login...")
    # Esperamos que o modal de login (que tem a classe 'active' quando est√° aberto) se torne invis√≠vel.
    # Isto garante que a anima√ß√£o de fecho terminou antes de prosseguirmos.
    wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, ".login-modal.active")))
    print("‚úÖ Modal de login fechado.")

    print("‚ñ∂Ô∏è  A verificar o resultado do login (sucesso ou falha)...")
    try:
        # Agora que o modal desapareceu, procuramos pelo bot√£o de logout com seguran√ßa.
        logout_button = wait.until(EC.visibility_of_element_located((By.CLASS_NAME, "logout-button")))
        print("üéâ TESTE CONCLU√çDO: Login realizado com sucesso!")
        print(f"‚úÖ O bot√£o '{logout_button.text}' foi encontrado.")
    except TimeoutException:
        # Se o bot√£o de logout n√£o aparecer, procuramos pela mensagem de erro (condi√ß√£o de FALHA)
        try:
            error_message_element = driver.find_element(By.CLASS_NAME, "error-message")
            print("‚ùå TESTE FALHOU (como esperado para credenciais erradas):")
            print(f"‚úÖ Mensagem de erro encontrada: '{error_message_element.text}'")
        except:
            # Se n√£o encontrar nem o sucesso nem o erro, algo inesperado aconteceu.
            print("‚ùå ERRO INESPERADO: O teste falhou, mas n√£o foi encontrada nenhuma mensagem de erro.")
            print(f"‚ÑπÔ∏è  A guardar um screenshot como '{NOME_DO_FICHEIRO_SCREENSHOT}' para depura√ß√£o.")
            driver.save_screenshot(NOME_DO_FICHEIRO_SCREENSHOT)
            # Levanta a exce√ß√£o original para que o erro principal seja vis√≠vel
            raise

except Exception as e:
    print(f"‚ùå ERRO DURANTE O TESTE: {e}")

finally:
    time.sleep(3)
    driver.quit()
    print("‚ñ∂Ô∏è  Navegador fechado.")